local normal_color = vmath.vector4(0.5, 0.5, 0.5, 1)
local hover_color = vmath.vector4(0.7, 0.7, 0.7, 1)

function handle_hovering(box, action)
	if action.x and action.y then
		-- check if the mouse is over the box
		local over_box = gui.pick_node(box, action.x, action.y)
		if over_box then
			gui.set_color(box, hover_color)
		else
			gui.set_color(box, normal_color)
		end
	end
end

function handle_clicking(box, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(box, action.x, action.y) then
			return true
		end
	end
end

-- Create a button or interface element that calls the open_website function when clicked
function maximize_program()
	-- add this dependency library: https://github.com/subsoap/defos
	-- Then:
	-- Maximize the window
	defos.set_maximized(true)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	Purchase_situation = gui.get_node("Purchase_situation")
	text_bought_situation = gui.get_node("text_bought_situation")
	maximize_program()
	defos.reset_cursor()
end

function on_input(self, action_id, action)
	local Pay_Button = gui.get_node("Pay_Button")
	local About_Button = gui.get_node("About_Button")
	local Exit_Button = gui.get_node("Exit_Button")

	handle_hovering(Pay_Button, action)
	handle_hovering(About_Button, action)
	handle_hovering(Exit_Button, action)
	if handle_clicking(Pay_Button, action_id, action) then
		if not user_bought then
			msg.post("main:/loader#loader", "unload_scene", { scene = "main:/loader#main_menu" })
			msg.post("main:/loader#loader", "load_scene", { scene = "main:/loader#select_coin" })
		else
			msg.post("main:/loader#loader", "unload_scene", { scene = "main:/loader#main_menu" })
			msg.post("main:/loader#loader", "load_scene", { scene = "main:/loader#bought" })
		end
	end
	if handle_clicking(About_Button, action_id, action) then
		msg.post("main:/loader#loader", "unload_scene", { scene = "main:/loader#main_menu" })
		msg.post("main:/loader#loader", "load_scene", { scene = "main:/loader#about" })
	end
	if handle_clicking(Exit_Button, action_id, action) then
		sys.exit(0)
	end
	if user_bought then
		set_color_to_box(Purchase_situation, "008000")
		gui.set_text(text_bought_situation, "You bought this app!")
	else
		set_color_to_box(Purchase_situation, "800000")
		gui.set_text(text_bought_situation, "You have not purchased this app yet!")
	end
end

function set_color_to_box(box, color_string)
	local color = vmath.vector4(
	tonumber(color_string:sub(1, 2), 16) / 255,
	tonumber(color_string:sub(3, 4), 16) / 255,
	tonumber(color_string:sub(5, 6), 16) / 255,
	1.0)
	gui.set_color(box, color)
end